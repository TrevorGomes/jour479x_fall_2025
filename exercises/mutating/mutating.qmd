# Mutating data

One of the most common data analysis techniques is to look at change over time. The most common way of comparing change over time is through percent change. The math behind calculating percent change is very simple, and you should know it off the top of your head. The easy way to remember it is:

`(new - old) / old`

Or new minus old divided by old. Your new number minus the old number, the result of which is divided by the old number. To do that in R, we can use `dplyr` and `mutate` to calculate new metrics in a new field using existing fields of data.

So first we'll import the tidyverse so we can read in our data and begin to work with it. Go ahead and do that:

```{r}
#| warning: false
#| message: false
library(tidyverse)
```

Now you'll need a common and simple dataset of total attendance at NCAA football games over the last few seasons.

```{r}
#| warning: false
#| message: false
#| results: asis
#| echo: false
library(downloadthis)
library(glue)

dllink <- download_link(
  link = "https://dwillis.github.io/sports-data-files/attendance.csv",
  button_label = "Download csv file",
  button_type = "danger",
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)

glue("<pre><p><strong>For this walkthrough:</strong></p><p>{dllink}</p></pre>")

```

You'll import it something like this.

```{r}
attendance <- read_csv('data/attendance.csv')
```

If you want to see the first six rows -- handy to take a peek at your data -- you can use the function `head`.

```{r}
head(attendance)
```

What's one thing you notice about the data that might make year-over-year comparisons more complex?

For most teams that have changed conferences since 2013, there are two separate rows representing the two conferences they've been members of. Comparing App State in 2013 and others years would be difficult because they were independent until 2014, when they joined the Sun Belt Conference.

The code to calculate percent change is pretty simple. Remember, with `summarize`, we used `n()` to count things. With `mutate`, we use very similar syntax to calculate a new value using other values in our dataset. So in this case, we're trying to do (new-old)/old, but we're doing it with fields. If we look at what we got when we did `head`, you'll see there's \`2024\` as the new data, and we'll use \`2023\` as the old data. So we're looking at one year. Then, to help us, we'll use arrange again to sort it, so we get the fastest growing school over one year.

```{r}
attendance |> mutate(
  change = (`2024` - `2023`)/`2023`
) 
```
What do we see right away? Do those numbers look like we expect them to? No. They're a decimal expressed as a percentage. So let's fix that by multiplying by 100. 

```{r}
attendance |> mutate(
  change = ((`2024` - `2023`)/`2023`)*100
) 
```
Now, does this ordering do anything for us? No. Let's fix that with arrange. 

```{r}
attendance |> mutate(
  change = ((`2024` - `2023`)/`2023`)*100
) |> arrange(desc(change))
```

Who had the most growth in 2024 compared to the year before? What could account for that change? And what team(s) are the most interesting here?

SMU had the largest year-over-year increase in attendance from 2023 to 2024 because they had a standout year, making the Playoffs for the first time. Colorado State is quite surprising to see because they were good - finishing at 8-5 - but not amazing.

## Back to women's soccer

Let's turn back to the women's soccer match data from this season.

Import it like this:

```{r}
matches_2025 <- read_csv("https://raw.githubusercontent.com/dwillis/NCAAWomensSoccerData/main/data/ncaa_womens_soccer_matchstats_2025.csv")
```

Previously we calculated totals for shots attempted and shots on goal for each time. Now let's do shots on goal and goals, using group_by() and summarize(), and then we'll use mutate to add a percentage to that and see what stands out.

```{r}

bigten <- c("Maryland Terrapins, Terps", "Purdue Boilermakers", "Illinois Fighting Illini", "Rutgers Scarlet Knights", "Penn State Nittany Lions", "Oregon Ducks", "UCLA Bruins", "Southern California Trojans", "Wisconsin Badgers", "Nebraska Cornhuskers", "Iowa Hawkeyes", "Washington Huskies", "Minnesota Golden Gophers", "Ohio State Buckeyes", "Michigan St. Spartans", "Michigan Wolverines", "Indiana Hoosiers", "Northwestern Wildcats")

matches_2025 |> 
  filter(team %in% bigten) |> 
  group_by(team) |> 
  summarise(
    total_on_goal = sum(so_g),
    total_goals = sum(goals)
  ) |> 
  mutate(percent = total_goals/total_on_goal * 100) |> 
  arrange(desc(percent))
```

What stands out to you here? Describe that below. Would you narrow down the results to certain teams based on the data? If so, do that in the code and explain why you did it below. Finally, what's the most interesting result to you that could be a story?

Maryland's conversion rate for shots on goal is mediocre for a Power Five team, being on page 17 of the tibble and sitting at roughly the midway point in the country. I would narrow down the teams to members of the Big Ten to see where Maryland stands compared to some of the major programs in the country. 

I narrowed the data down to Big Ten schools and found that Maryland at ninth in the conference - exactly at the midpoint. I did this to get a sense of where Maryland's offensive efficiency stands compared to the teams it will be playing in conference play. The most interesting stories based on the percentage of shots on goal that turn into goals would likely be found on either side of the spectrum within the Big Ten. USC has separated itself into a fairly distant first-place, and Oregon is firmly in last, despite notching among the most shots on goal in the conference.